###############################################################################
# Install a daily cronjob to push encrypted backups to AWS S3.
###############################################################################

bundle agent a72_s3_bkups
{

meta:

    "tags" slist => { "autorun" };

methods:

    gc_supported_os::
    "a72s3bkup" usebundle => a72_s3_bkup_script_run;

    "a72s3key" usebundle => a72_s3_key_run;

    "a72s3cb" usebundle => a72_s3_creds_and_bucket_run;

}

bundle agent a72_s3_bkup_script_run
{

vars:

    "s_dir" string  => "$(gv.scripts)";

    "s_name" string => "bkup-to-s3";

files:

    "/etc/cron.daily/80-$(s_name)"
    handle          => "a72h_bkup_cronjob",
    create          => "true",
    perms           => mog("755","root","root"),
    copy_from       => local_dcp("$(s_dir)/$(s_name).txt"),
    classes         => if_repaired("a72c_bkup_script_fixed");

commands:

    a72c_bkup_script_fixed::
    "$(gv.log_notice)"
    args => "Installed cronjob for S3 backups";

}

bundle agent a72_s3_key_run
{

vars:

    "s_dir" string  => "$(gv.secrets)";

    "s_name" string => "bkup-to-s3.key";

classes:

    "a72c_keyfile_ready" expression => fileexists("$(s_dir)/$(s_name).txt");

files:

    a72c_keyfile_ready::
    "/usr/local/etc/$(s_name)"
    handle          => "a72h_bkup_key",
    create          => "true",
    perms           => mog("400","root","root"),
    copy_from       => local_dcp("$(s_dir)/$(s_name).txt"),
    classes         => if_repaired("a72c_bkup_key_fixed");

commands:

    a72c_bkup_key_fixed::
    "$(gv.log_notice)"
    args => "Installed encryption key for S3 backups";

}

bundle agent a72_s3_creds_and_bucket_run
{

# The /root/.aws file promises have a similar effect as running the
# shell command-line invocation of 'aws configure' (using the AWS
# CLI program). It relies on the presence of a credentials file.

vars:

    "s_secdir" string  => "$(gv.secrets)";

    "s_mdir" string  => "$(gv.mustache)";

    "s_json" string => "bkup-to-s3-creds.json";

    "s_cconf" string => "aws-credentials.mustache";

    "s_econf" string => "aws-env.mustache";

classes:

    "a72c_json_ready" expression => fileexists("$(s_secdir)/$(s_json)");

files:

    a72c_json_ready::
    "/root/.aws/."
    handle          => "a72h_aws_confdir",
    create          => "true",
    perms           => mog("755","root","root"),
    classes         => if_repaired("a72c_aws_conf_fixed");

    "/root/.aws/credentials"
    handle          => "a72h_aws_creds",
    depends_on      => { "a72h_aws_confdir" },
    create          => "true",
    perms           => mog("600","root","root"),
    edit_template   => "$(s_mdir)/$(s_cconf)",
    template_method => "mustache",
    template_data   => readjson("$(s_secdir)/$(s_json)", 50000),
    classes         => if_repaired("a72c_aws_conf_fixed");

    "/usr/local/etc/bkup-to-s3.env"
    handle          => "a72h_aws_env",
    create          => "true",
    perms           => mog("600","root","root"),
    edit_template   => "$(s_mdir)/$(s_econf)",
    template_method => "mustache",
    template_data   => readjson("$(s_secdir)/$(s_json)", 50000),
    classes         => if_repaired("a72c_aws_env_fixed");

commands:

    a72c_aws_conf_fixed::
    "$(gv.log_notice)"
    args => "Fixed AWS CLI config for root";

    a72c_aws_env_fixed::
    "$(gv.log_notice)"
    args => "Fixed AWS environment file for S3 backups";

}
