###############################################################################
# Classes that may be useful to other promises. When they're defined in
# "bundle common", they can be accessed unqualified from any promise.
###############################################################################

bundle agent a06_classes
{

meta:

    "tags" slist => { "autorun" };

methods:

    "a06classg" usebundle => a06_set_global_classes;

    !gc_supported_os::
    "a06classr" usebundle => a06_report_unsupported_os;

}

bundle common a06_set_global_classes
{

classes:

    # This class is set to true when all the conditions chained
    # together are ready for the regular promises to begin running.

    "gc_agent_ready" and => { "gc_supported_os", "gc_localconf_found" };

    # Supported OS detection.

    "gc_supported_os" expression => not(strcmp("$(gv.os)",""));

    "gc_el6" or => { classmatch("amzn_201[56]_.*"), "redhat_6" };

    "gc_el7" or => { "redhat_7" };

    "gc_el" or => { "gc_el6", "gc_el7" };

    # Local CFEngine configuration detection.

    "gc_localconf_found" expression => fileexists("$(gv.localconf_file)");

    # Classes based on local CFEngine configuration settings.

    "gc_security_pkg_auto_install" expression =>
            strcmp("$(gv.localconf[securityUpdates])","enable");

    "gc_enable_ssh_password_auth" expression =>
            strcmp("$(gv.localconf[sshdPasswordAuth])","enable");

    # AWS CLI detection.

    "gc_aws_cli_installed" or => { fileexists("/usr/bin/aws"),
                                   fileexists("/usr/local/bin/aws"),
                                   fileexists("/bin/aws") };

}

bundle agent a06_report_unsupported_os
{

reports:

    # This is the only place we use a "reports" promise. It is
    # here because un unsupported OS will not have the CFEngine
    # /var/log file set up.

    "This promise ruleset does not support your OS";

}
