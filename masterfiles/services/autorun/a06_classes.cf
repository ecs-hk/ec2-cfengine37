###############################################################################
# Classes that may be useful to other promises. When they're defined in
# "bundle common", they can be accessed unqualified from any promise.
###############################################################################

bundle agent a06_classes
{

meta:

    "tags" slist => { "autorun" };

methods:

    "a06classg" usebundle => a06_set_global_classes;

    !gc_supported_os::
    "a06classr" usebundle => a06_report_unsupported_os;

}

bundle common a06_set_global_classes
{

classes:

    "gc_supported_os" expression => not(strcmp("$(gv.os)",""));

    "gc_el6" or => { "amzn_2015_09", "redhat_6" };

    "gc_el7" or => { "redhat_7" };

    # If the agent system has specified that security updates should
    # be automatically installed, set this class.

    "gc_security_pkg_auto_install" expression =>
            strcmp("$(gv.localconf[securityUpdates])","install");

    # If the agent system has specified that sshd(8) should allow
    # password authentication (which this ruleset disables by default),
    # then set this class.

    "gc_enable_ssh_password_auth" expression =>
            strcmp("$(gv.localconf[sshdPasswordAuth])","enable");

    # AWS CLI is bundled with Amazon Linux AMIs already, but we do this
    # check for all OSes, since we rely on it.

    "gc_aws_cli_installed" or => { fileexists("/usr/bin/aws"),
                                   fileexists("/usr/local/bin/aws"),
                                   fileexists("/bin/aws") };

}

bundle agent a06_report_unsupported_os
{

reports:

    # This is the only place we use a "reports" promise. It is
    # here because un unsupported OS will not have the CFEngine
    # /var/log file set up.

    "This promise ruleset does not support your OS";

}
