#!/bin/bash

# Managed by CFEngine

# This cronjob tars, compresses, and encrypts named directories, then
# attempts to push them to AWS S3.
#
# To decrypt backed-up, encrypted tarballs, use:
#   openssl enc -aes128 -in $infile -out $outfile -d -a

# ------------------------------------------------------------------------- #
#			VARIABLE DEFINITIONS
# ------------------------------------------------------------------------- #

PATH=/usr/bin:/bin:/usr/local/bin

export HOME=/root

readonly _me="${0##*/}"
readonly _output="/tmp/${_me}.log"

readonly _key='/usr/local/etc/bkup-to-s3.key'
readonly _json_conf='/usr/local/etc/cfengine.json'

# ------------------------------------------------------------------------- #
#			FUNCTIONS
# ------------------------------------------------------------------------- #

errout() {
	local _msg="${_me} error: ${1}"

	printf '%s\n' "${_msg}"
	logger -p crit "${_msg}"

	exit 1
}

noticeout() {
	# Not an error condition. Backups just haven't been configured
	# yet. Log to a non-scary syslog level, and get out quietly.

	local _msg="${_me}: ${1}"

	printf '%s\n' "${_msg}"
	logger -p local3.notice "${_msg}"

	exit 0
}

audit_basic_operation() {
	if [ ! -e "${_json_conf}" ] ; then
		errout "CFEngine JSON config is missing"
	fi

	jq '.' "${_json_conf}" > /dev/null 2>&1

	if [ ${?} -ne 0 ] ; then
		errout "CFEngine JSON config is broken"
	fi
}

check_whether_backups_should_run() {
	local _test="$(jq -r '.backup' ${_json_conf})"

	if [ "${_test}" == "enable" ] ; then
		return
	else
		noticeout "Backups are not enabled"
	fi
}

audit_encryption_key() {
	if [ ! -e "${_key}" ] ; then
		errout "No encryption key file found"
	fi
	
	if [ $(stat -c %s ${_key}) -lt 20 ] ; then
		errout "Encryption key looks too short"
	fi
}

audit_aws_cli() {
	aws s3 help >/dev/null 2>&1
	if [ ${?} -ne 0 ] ; then
		errout "aws CLI test returned an error"
	fi

	if [ ! -e "${HOME}/.aws/credentials" ] ; then
		errout "aws CLI has not been configured yet"
	fi
}

set_s3_bucket_name() {
	readonly _s3_bucket="$(jq -r '.backupS3Bucket' ${_json_conf})"

	if [ -z "${_s3_bucket}" ] || [ "${_s3_bucket}" == "null" ] ; then
		errout "S3 bucket is not set in ${_json_conf}"
	fi
}

set_bkup_input_list() {
	readonly _bkup_list="$(jq -r '.backupDirectories[]' ${_json_conf})"

	if [ -z "${_bkup_list}" ] ; then
		errout "Directories to backup not set in ${_json_conf}"
	fi

	for _i in ${_bkup_list} ; do
		if [ ! -e "${_i}" ] ; then
			errout "${_i} cannot be backed up (does not exist)"
		fi
	done
}

set_bkup_output_file_name() {
	# The backup name is set so that a rolling twelve months and a
	# rolling ~thirty days are kept in AWS S3 for each unique hostname.

	local _day="$(date +%d)"
	local _month="$(date +%m)"
	local _b

	if [ "${_day}" == "01" ] ; then
		_b="${HOSTNAME}-Monthly-${_month}-${_day}"
	else
		_b="${HOSTNAME}-Daily-${_day}"
	fi

	readonly _bkup_name="${_b}"
}

# ------------------------------------------------------------------------- #
#			MAIN LOGIC
# ------------------------------------------------------------------------- #

if [ "$(whoami)" != "root" ] ; then
	errout "I only run as root"
fi

audit_basic_operation

check_whether_backups_should_run

audit_encryption_key
audit_aws_cli

set_s3_bucket_name
set_bkup_input_list
set_bkup_output_file_name

cp /dev/null "${_output}"

tar cfz - ${_bkup_list}							\
2>> "${_output}"							|
openssl enc -aes128 -salt -pass file:"${_key}" -e -a			\
2>> "${_output}"							|
aws s3 cp - s3://"${_s3_bucket}"/"${_bkup_name}.tgz.enc"		\
>> "${_output}" 2>&1

if [ ${?} -ne 0 ] ; then
	errout "Backup failed. Check log ${_output}"
fi

exit 0
